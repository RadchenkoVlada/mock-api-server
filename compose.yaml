services:
  tests:
    build:
      context: .
      dockerfile: ./Dockerfile_tests
    container_name: tests-server
    depends_on:
      api-mock:
        condition: service_started
      mock-database:
        condition: service_healthy
    environment:
      - REQUESTS_CA_BUNDLE=/root/ca/rsa/volumed_dir/full-chain.cert.pem
    working_dir: /opt/project
    volumes:
      - .:/opt/project
      - api_mock_certs:/root/ca/rsa/volumed_dir
    entrypoint: ["sh", "-c", "pytest", "./tests/"]

  api-mock:
    build: .
    container_name: api-mock-server
    restart: always
    volumes:
      - api_mock_certs:/root/ca/rsa/volumed_dir
    ports:
      - "8080:80"
      - "8443:443"

  mock-database:
    image: postgres:latest
    container_name: mock-db-server
    restart: always
    env_file: "database.env"
    volumes:
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
# Almost empty database
#      - ./database/empty.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      # localhost is used in order to wait until init.sql script is done
      test: pg_isready -h localhost -U $$POSTGRES_USER -d $$POSTGRES_DB
      interval: 2s
      timeout: 60s
      retries: 20

volumes:
  api_mock_certs:
